import streamlit as st
import json
from io import StringIO

st.title("üéì GPA / CGPA Calculator")

grade_map = {
    'A': 4.0,
    'B': 3.0,
    'C': 2.0,
    'D': 1.0,
    'F': 0.0
}

# Upload saved session data
uploaded_file = st.file_uploader("üìÇ Upload your saved session (optional)", type=["json"])

# Initialize storage
session_data = []
total_units_all = 0
total_weighted_points_all = 0


if uploaded_file is not None:
    uploaded_data = json.load(uploaded_file)
    session_data = uploaded_data.get("session_data", [])
    st.success("‚úÖ Session data loaded successfully!")


    for semester in session_data:
        total_units_all += semester.get("total_units", 0)
        total_weighted_points_all += semester.get("total_weighted_points", 0)

else:
    sessions = st.number_input("How many sessions?", min_value=1, step=1)
    for s in range(1, sessions + 1):
        st.subheader(f"üìò Session {s}")
        semesters = st.number_input(f"How many semesters in session {s}?", min_value=1, step=1, key=f"sem_{s}")

        for sem in range(1, semesters + 1):
            st.markdown(f"### üìó Semester {sem}")
            num_courses = st.number_input(f"Number of courses:", min_value=1, step=1, key=f"course_{s}_{sem}")
            
            semester = {
                "session": s,
                "semester": sem,
                "courses": [],
                "total_units": 0,
                "total_weighted_points": 0
            }

            for c in range(1, num_courses + 1):
                st.markdown(f"#### üìö Course {c}")
                course_name = st.text_input("Course name:", key=f"name_{s}_{sem}_{c}")
                col1, col2 = st.columns(2)
                with col1:
                    grade_input = st.selectbox("Grade (A-F)", ["A", "B", "C", "D", "F"], key=f"grade_{s}_{sem}_{c}")
                with col2:
                    unit = st.number_input("Course unit", min_value=1, max_value=6, step=1, key=f"unit_{s}_{sem}_{c}")

                point = grade_map.get(grade_input, 0.0)
                semester["courses"].append({
                    "name": course_name,
                    "grade": grade_input,
                    "unit": unit,
                    "point": point
                })

                semester["total_units"] += unit
                semester["total_weighted_points"] += point * unit
                st.write(f"{course_name} ‚Üí Grade: {grade_input}, GP: {point}")

            if semester["total_units"] > 0:
                semester_gpa = semester["total_weighted_points"] / semester["total_units"]
                st.success(f"üìä GPA for Session {s}, Semester {sem}: {round(semester_gpa, 2)}")
                total_units_all += semester["total_units"]
                total_weighted_points_all += semester["total_weighted_points"]
            else:
                st.error("‚ùå No valid course entries for this semester.")

            session_data.append(semester)

# CGPA Summary
if total_units_all > 0:
    cgpa = total_weighted_points_all / total_units_all
    total_semesters = len(session_data)
    st.markdown("---")
    st.subheader("üìå Final Summary")
    st.markdown(f"**Total Semesters:** {total_semesters}")
    st.markdown(f"**Final CGPA:** `{round(cgpa, 2)}`")
else:
    st.error("‚ùå No valid GPA data to compute CGPA.")

# üéØ Feature: Download Session (JSON)
if session_data:
    json_data = json.dumps({"session_data": session_data}, indent=2)
    st.download_button("üíæ Download Session (JSON)", json_data, file_name="gpa_session.json", mime="application/json")

# üìÑ Feature: Download Readable Result
if session_data:
    result_txt = StringIO()
    result_txt.write("üìò GPA & CGPA Report\n")
    result_txt.write("-" * 30 + "\n")

    for semester in session_data:
        s = semester["session"]
        sem = semester["semester"]
        result_txt.write(f"\nSession {s} - Semester {sem}\n")
        result_txt.write("-" * 30 + "\n")
        for course in semester["courses"]:
            result_txt.write(f"{course['name']} | Grade: {course['grade']} | Unit: {course['unit']} | GP: {course['point']}\n")
        gpa = semester["total_weighted_points"] / semester["total_units"] if semester["total_units"] else 0
        result_txt.write(f"Semester GPA: {round(gpa, 2)}\n")

    result_txt.write("\nüéØ Final CGPA: {:.2f}\n".format(cgpa if total_units_all > 0 else 0))
    result_txt.write("-" * 30 + "\n")
    result_txt.write("Generated by: GPA/CGPA App by Datapsalm & Victoria\n")

    st.download_button("üìÑ Download Readable Report (TXT)", result_txt.getvalue(), file_name="gpa_report.txt", mime="text/plain")

# Footer
st.markdown("""
<hr>
<p style='text-align: center;'>Built with ‚ù§Ô∏è by Datapsalm & Victoria | GPA/CGPA App</p>
""", unsafe_allow_html=True)
